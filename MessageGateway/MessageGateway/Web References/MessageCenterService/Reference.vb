'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.17929
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
'
Namespace MessageCenterService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MessageCenterServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MessageCenterService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NotifyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EchoOfSendSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecieveMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EMP.My.MySettings.Default.EMP_MessageGateway_MessageCenterService_MessageCenterService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendMessageCompleted As SendMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event NotifyStatusCompleted As NotifyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event EchoOfSendSMSCompleted As EchoOfSendSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event RecieveMessageCompleted As RecieveMessageCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("SendMessage", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function SendMessage( _
                    ByVal NodeID As String,  _
                    ByVal NodeUsercode As String,  _
                    ByVal NodePassword As String,  _
                    ByVal Usercode As String,  _
                    ByVal Password As String,  _
                    ByVal Sender As String,  _
                    ByVal SenderName As String,  _
                    ByVal Recipients As String,  _
                    ByVal CC As String,  _
                    ByVal Bcc As String,  _
                    ByVal MessageType As Integer,  _
                    ByVal Title As String,  _
                    ByVal Content As String,  _
                    ByVal Format As Integer,  _
                    ByVal RetryOnError As Boolean,  _
                    ByVal Reportflag As Integer,  _
                    ByVal MessageID As String,  _
                    ByVal InterfaceID As String,  _
                    ByVal CONNID As String,  _
                    ByVal TerminalID As String,  _
                    ByVal IPAddress As String,  _
                    ByVal Param As String) As Integer
            Dim results() As Object = Me.Invoke("SendMessage", New Object() {NodeID, NodeUsercode, NodePassword, Usercode, Password, Sender, SenderName, Recipients, CC, Bcc, MessageType, Title, Content, Format, RetryOnError, Reportflag, MessageID, InterfaceID, CONNID, TerminalID, IPAddress, Param})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMessageAsync( _
                    ByVal NodeID As String,  _
                    ByVal NodeUsercode As String,  _
                    ByVal NodePassword As String,  _
                    ByVal Usercode As String,  _
                    ByVal Password As String,  _
                    ByVal Sender As String,  _
                    ByVal SenderName As String,  _
                    ByVal Recipients As String,  _
                    ByVal CC As String,  _
                    ByVal Bcc As String,  _
                    ByVal MessageType As Integer,  _
                    ByVal Title As String,  _
                    ByVal Content As String,  _
                    ByVal Format As Integer,  _
                    ByVal RetryOnError As Boolean,  _
                    ByVal Reportflag As Integer,  _
                    ByVal MessageID As String,  _
                    ByVal InterfaceID As String,  _
                    ByVal CONNID As String,  _
                    ByVal TerminalID As String,  _
                    ByVal IPAddress As String,  _
                    ByVal Param As String)
            Me.SendMessageAsync(NodeID, NodeUsercode, NodePassword, Usercode, Password, Sender, SenderName, Recipients, CC, Bcc, MessageType, Title, Content, Format, RetryOnError, Reportflag, MessageID, InterfaceID, CONNID, TerminalID, IPAddress, Param, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMessageAsync( _
                    ByVal NodeID As String,  _
                    ByVal NodeUsercode As String,  _
                    ByVal NodePassword As String,  _
                    ByVal Usercode As String,  _
                    ByVal Password As String,  _
                    ByVal Sender As String,  _
                    ByVal SenderName As String,  _
                    ByVal Recipients As String,  _
                    ByVal CC As String,  _
                    ByVal Bcc As String,  _
                    ByVal MessageType As Integer,  _
                    ByVal Title As String,  _
                    ByVal Content As String,  _
                    ByVal Format As Integer,  _
                    ByVal RetryOnError As Boolean,  _
                    ByVal Reportflag As Integer,  _
                    ByVal MessageID As String,  _
                    ByVal InterfaceID As String,  _
                    ByVal CONNID As String,  _
                    ByVal TerminalID As String,  _
                    ByVal IPAddress As String,  _
                    ByVal Param As String,  _
                    ByVal userState As Object)
            If (Me.SendMessageOperationCompleted Is Nothing) Then
                Me.SendMessageOperationCompleted = AddressOf Me.OnSendMessageOperationCompleted
            End If
            Me.InvokeAsync("SendMessage", New Object() {NodeID, NodeUsercode, NodePassword, Usercode, Password, Sender, SenderName, Recipients, CC, Bcc, MessageType, Title, Content, Format, RetryOnError, Reportflag, MessageID, InterfaceID, CONNID, TerminalID, IPAddress, Param}, Me.SendMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMessageCompleted(Me, New SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("NotifyStatus", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function NotifyStatus(ByVal Reciver As String, ByVal SequenceNo As String, ByVal MessageID As String, ByVal Recipient As String, ByVal NotifyType As Integer, ByVal Status As Integer, ByVal Text As String, ByRef Reserve As String) As Integer
            Dim results() As Object = Me.Invoke("NotifyStatus", New Object() {Reciver, SequenceNo, MessageID, Recipient, NotifyType, Status, Text, Reserve})
            Reserve = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NotifyStatusAsync(ByVal Reciver As String, ByVal SequenceNo As String, ByVal MessageID As String, ByVal Recipient As String, ByVal NotifyType As Integer, ByVal Status As Integer, ByVal Text As String, ByVal Reserve As String)
            Me.NotifyStatusAsync(Reciver, SequenceNo, MessageID, Recipient, NotifyType, Status, Text, Reserve, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NotifyStatusAsync(ByVal Reciver As String, ByVal SequenceNo As String, ByVal MessageID As String, ByVal Recipient As String, ByVal NotifyType As Integer, ByVal Status As Integer, ByVal Text As String, ByVal Reserve As String, ByVal userState As Object)
            If (Me.NotifyStatusOperationCompleted Is Nothing) Then
                Me.NotifyStatusOperationCompleted = AddressOf Me.OnNotifyStatusOperationCompleted
            End If
            Me.InvokeAsync("NotifyStatus", New Object() {Reciver, SequenceNo, MessageID, Recipient, NotifyType, Status, Text, Reserve}, Me.NotifyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnNotifyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.NotifyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NotifyStatusCompleted(Me, New NotifyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("EchoOfSendSMS", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function EchoOfSendSMS(ByVal Reciver As String, ByVal SequenceNo As String, ByVal MessageID As String, ByVal Recipient As String, ByVal Status As Integer, ByVal ErrorCode As Integer, ByRef Reserve As String) As Integer
            Dim results() As Object = Me.Invoke("EchoOfSendSMS", New Object() {Reciver, SequenceNo, MessageID, Recipient, Status, ErrorCode, Reserve})
            Reserve = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EchoOfSendSMSAsync(ByVal Reciver As String, ByVal SequenceNo As String, ByVal MessageID As String, ByVal Recipient As String, ByVal Status As Integer, ByVal ErrorCode As Integer, ByVal Reserve As String)
            Me.EchoOfSendSMSAsync(Reciver, SequenceNo, MessageID, Recipient, Status, ErrorCode, Reserve, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EchoOfSendSMSAsync(ByVal Reciver As String, ByVal SequenceNo As String, ByVal MessageID As String, ByVal Recipient As String, ByVal Status As Integer, ByVal ErrorCode As Integer, ByVal Reserve As String, ByVal userState As Object)
            If (Me.EchoOfSendSMSOperationCompleted Is Nothing) Then
                Me.EchoOfSendSMSOperationCompleted = AddressOf Me.OnEchoOfSendSMSOperationCompleted
            End If
            Me.InvokeAsync("EchoOfSendSMS", New Object() {Reciver, SequenceNo, MessageID, Recipient, Status, ErrorCode, Reserve}, Me.EchoOfSendSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnEchoOfSendSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.EchoOfSendSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EchoOfSendSMSCompleted(Me, New EchoOfSendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("RecieveMessage", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function RecieveMessage(ByVal Reciver As String, ByVal SequenceNo As String, ByVal Recipients As String, ByVal From As String, ByVal Sender As String, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal RecieveTime As Date) As Integer
            Dim results() As Object = Me.Invoke("RecieveMessage", New Object() {Reciver, SequenceNo, Recipients, From, Sender, Title, Content, Format, RecieveTime})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecieveMessageAsync(ByVal Reciver As String, ByVal SequenceNo As String, ByVal Recipients As String, ByVal From As String, ByVal Sender As String, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal RecieveTime As Date)
            Me.RecieveMessageAsync(Reciver, SequenceNo, Recipients, From, Sender, Title, Content, Format, RecieveTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecieveMessageAsync(ByVal Reciver As String, ByVal SequenceNo As String, ByVal Recipients As String, ByVal From As String, ByVal Sender As String, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal RecieveTime As Date, ByVal userState As Object)
            If (Me.RecieveMessageOperationCompleted Is Nothing) Then
                Me.RecieveMessageOperationCompleted = AddressOf Me.OnRecieveMessageOperationCompleted
            End If
            Me.InvokeAsync("RecieveMessage", New Object() {Reciver, SequenceNo, Recipients, From, Sender, Title, Content, Format, RecieveTime}, Me.RecieveMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecieveMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecieveMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecieveMessageCompleted(Me, New RecieveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SendMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub NotifyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As NotifyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NotifyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Reserve() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub EchoOfSendSMSCompletedEventHandler(ByVal sender As Object, ByVal e As EchoOfSendSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EchoOfSendSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Reserve() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecieveMessageCompletedEventHandler(ByVal sender As Object, ByVal e As RecieveMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecieveMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
