'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.17929
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
'
Namespace MessageGateway
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MessageGatewayServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MessageGatewayService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EMP.My.MySettings.Default.MessageCenter_MessageGateway_MessageGatewayService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendMessageCompleted As SendMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event SendEmailCompleted As SendEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSMSCompleted As SendSMSCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("SendMessage", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function SendMessage(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal MessageType As Integer, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal RetryOnError As Boolean, ByVal Reportflag As Integer) As Integer
            Dim results() As Object = Me.Invoke("SendMessage", New Object() {Usercode, Password, Recipients, MessageType, Title, Content, Format, RetryOnError, Reportflag})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal MessageType As Integer, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal RetryOnError As Boolean, ByVal Reportflag As Integer)
            Me.SendMessageAsync(Usercode, Password, Recipients, MessageType, Title, Content, Format, RetryOnError, Reportflag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal MessageType As Integer, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal RetryOnError As Boolean, ByVal Reportflag As Integer, ByVal userState As Object)
            If (Me.SendMessageOperationCompleted Is Nothing) Then
                Me.SendMessageOperationCompleted = AddressOf Me.OnSendMessageOperationCompleted
            End If
            Me.InvokeAsync("SendMessage", New Object() {Usercode, Password, Recipients, MessageType, Title, Content, Format, RetryOnError, Reportflag}, Me.SendMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMessageCompleted(Me, New SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("SendEmail", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function SendEmail(ByVal Usercode As String, ByVal Password As String, ByVal Sender As String, ByVal SenderName As String, ByVal Recipients As String, ByVal CC As String, ByVal BCC As String, ByVal Title As String, ByVal Content As String, ByVal Format As Integer) As Integer
            Dim results() As Object = Me.Invoke("SendEmail", New Object() {Usercode, Password, Sender, SenderName, Recipients, CC, BCC, Title, Content, Format})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal Usercode As String, ByVal Password As String, ByVal Sender As String, ByVal SenderName As String, ByVal Recipients As String, ByVal CC As String, ByVal BCC As String, ByVal Title As String, ByVal Content As String, ByVal Format As Integer)
            Me.SendEmailAsync(Usercode, Password, Sender, SenderName, Recipients, CC, BCC, Title, Content, Format, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal Usercode As String, ByVal Password As String, ByVal Sender As String, ByVal SenderName As String, ByVal Recipients As String, ByVal CC As String, ByVal BCC As String, ByVal Title As String, ByVal Content As String, ByVal Format As Integer, ByVal userState As Object)
            If (Me.SendEmailOperationCompleted Is Nothing) Then
                Me.SendEmailOperationCompleted = AddressOf Me.OnSendEmailOperationCompleted
            End If
            Me.InvokeAsync("SendEmail", New Object() {Usercode, Password, Sender, SenderName, Recipients, CC, BCC, Title, Content, Format}, Me.SendEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendEmailCompleted(Me, New SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("SendSMS", RequestNamespace:="", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function SendSMS(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal Content As String) As Integer
            Dim results() As Object = Me.Invoke("SendSMS", New Object() {Usercode, Password, Recipients, Content})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSMSAsync(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal Content As String)
            Me.SendSMSAsync(Usercode, Password, Recipients, Content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSMSAsync(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal Content As String, ByVal userState As Object)
            If (Me.SendSMSOperationCompleted Is Nothing) Then
                Me.SendSMSOperationCompleted = AddressOf Me.OnSendSMSOperationCompleted
            End If
            Me.InvokeAsync("SendSMS", New Object() {Usercode, Password, Recipients, Content}, Me.SendSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSMSCompleted(Me, New SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SendMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendEmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendSMSCompletedEventHandler(ByVal sender As Object, ByVal e As SendSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
